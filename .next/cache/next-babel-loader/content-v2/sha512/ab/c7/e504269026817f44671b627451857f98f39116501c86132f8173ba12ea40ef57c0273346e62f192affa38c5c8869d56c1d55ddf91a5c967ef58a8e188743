{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Boris\\\\Desktop\\\\React\\\\NodeSend\\\\client\\\\context\\\\app\\\\appState.js\";\nimport React, { useReducer } from 'react';\nimport appContext from './appContext';\nimport appReducer from './appReducer';\nimport clientAxios from '../../config/axios';\nimport { MOSTRAR_ALERTA, LIMPIAR_ALERTA, SUBIENDO_ARCHIVO, SUBIR_ARCHIVO_EXITO, SUBIR_ARCHIVO_ERROR, CREAR_ENLACE_EXITO, AGREGAR_PASSWORD, LIMPIAR_STATE, AGREGAR_DESCARGAS } from '../../types/index';\n\nconst AppState = ({\n  children\n}) => {\n  const initialState = {\n    mensaje_archivo: '',\n    nombre: '',\n    nombre_original: '',\n    cargando: false,\n    descargas: 1,\n    password: '',\n    autor: null,\n    url: ''\n  }; // Crear dispatch y state\n\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(appReducer, initialState); // Mostrar alerta\n\n  const mostrarAlerta = msg => {\n    dispatch({\n      type: MOSTRAR_ALERTA,\n      payload: msg\n    });\n    setTimeout(() => {\n      dispatch({\n        type: LIMPIAR_ALERTA\n      });\n    }, 3000);\n  }; //Subir archivos al servidor\n\n\n  const subirArchivo = (formData, nombreArchivo) => {\n    dispatch({\n      type: SUBIENDO_ARCHIVO\n    });\n    setTimeout(async () => {\n      try {\n        const respuesta = await clientAxios.post('/api/files', formData);\n        dispatch({\n          type: SUBIR_ARCHIVO_EXITO,\n          payload: {\n            nombre: respuesta.data.archivo,\n            nombre_original: nombreArchivo\n          }\n        });\n      } catch (error) {\n        dispatch({\n          type: SUBIR_ARCHIVO_ERROR,\n          payload: error.response.data.msg\n        });\n      }\n    }, 2000);\n  };\n\n  const crearEnlace = async () => {\n    const data = {\n      name: state.nombre,\n      original_name: state.nombre_original,\n      downloads: state.descargas,\n      password: state.password,\n      author: state.autor\n    };\n\n    try {\n      const resultado = await clientAxios.post('/api/links', data);\n      dispatch({\n        type: CREAR_ENLACE_EXITO,\n        payload: resultado.data.msg\n      });\n    } catch (error) {}\n  };\n\n  const limpiarState = () => {\n    dispatch({\n      type: LIMPIAR_STATE\n    });\n  }; // Agregar password\n\n\n  const agregarPassword = password => {\n    dispatch({\n      type: AGREGAR_PASSWORD,\n      payload: password\n    });\n  }; // Agregar descargas\n\n\n  const agregarDescargas = descargas => {\n    dispatch({\n      type: AGREGAR_DESCARGAS,\n      payload: descargas\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(appContext.Provider, {\n    value: {\n      mensaje_archivo: state.mensaje_archivo,\n      nombre: state.nombre,\n      nombre_original: state.nombre_original,\n      cargando: state.cargando,\n      descargas: state.descargas,\n      password: state.password,\n      autor: state.autor,\n      url: state.url,\n      mostrarAlerta,\n      subirArchivo,\n      crearEnlace,\n      limpiarState,\n      agregarPassword,\n      agregarDescargas\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n\nexport default AppState;","map":{"version":3,"sources":["C:/Users/Boris/Desktop/React/NodeSend/client/context/app/appState.js"],"names":["React","useReducer","appContext","appReducer","clientAxios","MOSTRAR_ALERTA","LIMPIAR_ALERTA","SUBIENDO_ARCHIVO","SUBIR_ARCHIVO_EXITO","SUBIR_ARCHIVO_ERROR","CREAR_ENLACE_EXITO","AGREGAR_PASSWORD","LIMPIAR_STATE","AGREGAR_DESCARGAS","AppState","children","initialState","mensaje_archivo","nombre","nombre_original","cargando","descargas","password","autor","url","state","dispatch","mostrarAlerta","msg","type","payload","setTimeout","subirArchivo","formData","nombreArchivo","respuesta","post","data","archivo","error","response","crearEnlace","name","original_name","downloads","author","resultado","limpiarState","agregarPassword","agregarDescargas"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\r\nimport appContext from './appContext';\r\nimport appReducer from './appReducer';\r\nimport clientAxios from '../../config/axios';\r\n\r\nimport {\r\n    MOSTRAR_ALERTA,\r\n    LIMPIAR_ALERTA,\r\n    SUBIENDO_ARCHIVO,\r\n    SUBIR_ARCHIVO_EXITO,\r\n    SUBIR_ARCHIVO_ERROR,\r\n    CREAR_ENLACE_EXITO,\r\n    AGREGAR_PASSWORD,\r\n    LIMPIAR_STATE,\r\n    AGREGAR_DESCARGAS\r\n} from '../../types/index';\r\n\r\nconst AppState = ({ children }) => {\r\n\r\n    const initialState = {\r\n        mensaje_archivo: '',\r\n        nombre: '',\r\n        nombre_original: '',\r\n        cargando: false,\r\n        descargas: 1,\r\n        password: '',\r\n        autor: null,\r\n        url: ''\r\n    }\r\n\r\n    // Crear dispatch y state\r\n\r\n    const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n    // Mostrar alerta\r\n\r\n    const mostrarAlerta = msg => {\r\n\r\n        dispatch({\r\n            type: MOSTRAR_ALERTA,\r\n            payload: msg\r\n        })\r\n\r\n        setTimeout(() => {\r\n            dispatch({ type: LIMPIAR_ALERTA })\r\n        }, 3000);\r\n    }\r\n\r\n    //Subir archivos al servidor\r\n\r\n    const subirArchivo = (formData, nombreArchivo) => {\r\n\r\n        dispatch({\r\n            type: SUBIENDO_ARCHIVO\r\n        })\r\n\r\n        setTimeout(async () => {\r\n            try {\r\n                const respuesta = await clientAxios.post('/api/files', formData);\r\n                dispatch({\r\n                    type: SUBIR_ARCHIVO_EXITO,\r\n                    payload: {\r\n                        nombre: respuesta.data.archivo,\r\n                        nombre_original: nombreArchivo\r\n                    }\r\n                })\r\n                \r\n            } catch (error) {\r\n                dispatch({\r\n                    type: SUBIR_ARCHIVO_ERROR,\r\n                    payload: error.response.data.msg\r\n                })\r\n            }\r\n        }, 2000);\r\n\r\n    }\r\n\r\n    const crearEnlace = async () => {\r\n        const data = {\r\n            name: state.nombre,\r\n            original_name: state.nombre_original,\r\n            downloads: state.descargas,\r\n            password: state.password,\r\n            author: state.autor\r\n        }\r\n\r\n        try {\r\n            const resultado = await clientAxios.post('/api/links', data);\r\n            dispatch({\r\n                type: CREAR_ENLACE_EXITO,\r\n                payload: resultado.data.msg\r\n            })\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    const limpiarState = () => {\r\n        dispatch({\r\n            type: LIMPIAR_STATE\r\n        })\r\n    }\r\n\r\n    // Agregar password\r\n    const agregarPassword = password => {\r\n        dispatch({\r\n            type: AGREGAR_PASSWORD,\r\n            payload: password\r\n        })\r\n    }\r\n\r\n    // Agregar descargas\r\n    const agregarDescargas = descargas => {\r\n        dispatch({\r\n            type: AGREGAR_DESCARGAS,\r\n            payload: descargas\r\n        })\r\n    }\r\n\r\n    return (\r\n        <appContext.Provider\r\n            value={{\r\n                mensaje_archivo: state.mensaje_archivo,\r\n                nombre: state.nombre,\r\n                nombre_original: state.nombre_original,\r\n                cargando: state.cargando,\r\n                descargas: state.descargas,\r\n                password: state.password,\r\n                autor: state.autor,\r\n                url: state.url,\r\n                mostrarAlerta,\r\n                subirArchivo,\r\n                crearEnlace,\r\n                limpiarState,\r\n                agregarPassword,\r\n                agregarDescargas\r\n            }}\r\n        >\r\n            {children}\r\n        </appContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AppState;"]},"metadata":{},"sourceType":"module"}